# Weekly updates for Frank Hucek

# Week of 3/25 - 4/06
### Finished RPI Pathfinder camera system service
    - Finished python main scripts for deployment, capturing, and sending of photos to remote server
    - Pictures are first captured, and then the contents of the captured directory is sent using my send file protocol.
    - Maybe we should send a photo right after taking it?
      - will require thinking about consistent network connection, etc.
### Set up RPI system for remote deployment
    - Set up scripts for easy wifi configuration before being deployed in the field.
    - Placed service scripts in proper locations for system.

### Met up with team for Heatmap module brainstorming
    - Spent much of the week discussing implemented changes by other group members for the Heatmap modules.
    - Researched concepts like chunking.

# Week of 3/24 - 3/30
### Set up RPI camera module for test photos
    - This involved mounting the RPI camera setup on my wall and aiming it at a control grid I made with duct tape.
    - In order to hold the camera in place, I ended up going to Thinkbox and 3D printing a mount for my specific camera model.
    - Took a series of 10 photos, including 1 control photo, of a simple scene to test our algorithms on.
    - NOTE: The 10 photos are included in the commit under the root project directory /jobs/0
    
### Optimized RPI client/server scripts
    - Tested many cases and included proper exception handling so that server socket will not go down for strange reasons.
    - Added message between client/server to specify job directory and filename of destined photo on server.
    - Used detached signatures of the actual photo data for perfect data verification. Nothing will be written to the server unless it is from a known client.
    - Created new GPG keys for clients. Job number will now be reflected on the Key's username itself.
      Each valid client will have the username format of "pathfinder_cam_<job#>"
    - The new pathfinder_cam_0 public key is included in the commit

### Files changed/added
    - Contents of /jobs/0/
    - rpi_camera_modules/
      - client.py
      - server.py
      - pathfinder_cam_0_public.key

# Week of 3/16 - 3/23
### Generated Public/Private key pair for RPI
    - This is necessary to secure the communication to and from the remote server
    - Imported RPI public key on remote web server
    
### Completely re-wrote Client/Server scripts
    - It is INCREDIBLY insecure to have a server socket listening on a port and write whatever it recieves to file
    - Interfaces with GNUPG installed on both systems
    - Client signs a message in socket connection to verify its identity.
    - Server now verifies identity of client before writing photo data to file.
    - Client/Server scripts are now ready to be run on each device, and photos sent from the client will be written to the server in a secure manner.

### Installed, configured, and updated additional packages on remote server and RPI
    - Including GPG, node, graphql

# Week of 3/3 - 3/9

### Wrote Client/Server communication scripts
    - RPI image services must snap photos then send each photo to the awaiting web server
    - The web server must listen on a socket for incoming data.
    - Once the web server accepts a connection, it will wait for the client to send an image over the connection. This image will be written to its appropriate place in our directory structure.
    
### Further refined pathfinder_camera_service
    - The RPI system service now will include the python socket scripts
    - NOTE: the remote server script will also be included in the modules folder of our directory structure on the server.

### Files changed/added
    - Contents of rpi_camera_modules
    * NOTE: rpi_camera_modules doesn't run on the server, but runs on the RPi, but the code is included here for the purposes of version control.